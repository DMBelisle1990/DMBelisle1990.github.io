{"version":3,"sources":["js/terminal.js"],"names":["typeSpeed","typeDelay","enterDelay","blank","document","getElementById","terminalLines","activeEl","command","resultingEl","type","style","display","classList","add","setTimeout","i","typeLetter","setInterval","length","clearInterval","remove","pop","innerHTML"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,CAAC,YAAW;AACV,MAAMA,SAAS,GAAG,EAAlB;AACA,MAAMC,SAAS,GAAG,IAAlB;AACA,MAAMC,UAAU,GAAG,GAAnB;AACA,MAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAd;AACA,MAAMC,aAAa,GAAG,CACpB;AACEC,IAAAA,QAAQ,EAAEH,QAAQ,CAACC,cAAT,CAAwB,IAAxB,CADZ;AAEEG,IAAAA,OAAO,EAAE,iBAFX;AAGEC,IAAAA,WAAW,EAAEL,QAAQ,CAACC,cAAT,CAAwB,YAAxB;AAHf,GADoB,EAMpB;AACEE,IAAAA,QAAQ,EAAEH,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CADZ;AAEEG,IAAAA,OAAO,EAAE,qBAFX;AAGEC,IAAAA,WAAW,EAAEL,QAAQ,CAACC,cAAT,CAAwB,gBAAxB;AAHf,GANoB,EAWpB;AACEE,IAAAA,QAAQ,EAAEH,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CADZ;AAEEG,IAAAA,OAAO,EAAE,QAFX;AAGEC,IAAAA,WAAW,EAAEL,QAAQ,CAACC,cAAT,CAAwB,SAAxB;AAHf,GAXoB,CAAtB;AAmBA;;;;;;;;AAOA,WAASK,IAAT,OAAgD;AAAA,QAAjCH,QAAiC,QAAjCA,QAAiC;AAAA,QAAvBC,OAAuB,QAAvBA,OAAuB;AAAA,QAAdC,WAAc,QAAdA,WAAc;AAC9CF,IAAAA,QAAQ,CAACI,KAAT,CAAeC,OAAf,GAAyB,OAAzB;AACAL,IAAAA,QAAQ,CAACM,SAAT,CAAmBC,GAAnB,CAAuB,QAAvB;AACAC,IAAAA,UAAU,CAAC,YAAM;AACf,UAAIC,CAAC,GAAG,CAAR;AAEA,UAAMC,UAAU,GAAGC,WAAW,CAAC,YAAM;AACnC,YAAIF,CAAC,KAAKR,OAAO,CAACW,MAAR,GAAiB,CAA3B,EAA8B;AAC5BC,UAAAA,aAAa,CAACH,UAAD,CAAb;AAEAF,UAAAA,UAAU,CAAC,YAAM;AACfN,YAAAA,WAAW,CAACE,KAAZ,CAAkBC,OAAlB,GAA4B,OAA5B;AACAL,YAAAA,QAAQ,CAACM,SAAT,CAAmBQ,MAAnB,CAA0B,QAA1B;;AAEA,gBAAIf,aAAa,CAACa,MAAlB,EAA0B;AACxBT,cAAAA,IAAI,CAACJ,aAAa,CAACgB,GAAd,EAAD,CAAJ;AACD,aAFD,MAEO;AACLnB,cAAAA,KAAK,CAACQ,KAAN,CAAYC,OAAZ,GAAsB,OAAtB;AACAT,cAAAA,KAAK,CAACU,SAAN,CAAgBC,GAAhB,CAAoB,QAApB;AACD;AACF,WAVS,EAUPZ,UAVO,CAAV;AAWD;;AAEDK,QAAAA,QAAQ,CAACgB,SAAT,IAAsBf,OAAO,CAACQ,CAAD,CAAP,KAAe,GAAf,GAAqB,QAArB,GAAgCR,OAAO,CAACQ,CAAD,CAA7D;AACAA,QAAAA,CAAC;AACF,OAnB6B,EAmB3BhB,SAnB2B,CAA9B;AAoBD,KAvBS,EAuBPC,SAvBO,CAAV;AAwBD;;AAEDS,EAAAA,IAAI,CAACJ,aAAa,CAACgB,GAAd,EAAD,CAAJ;AACD,CA7DD","file":"terminal.319c4551.map","sourceRoot":"..","sourcesContent":["(function() {\n  const typeSpeed = 60;\n  const typeDelay = 1000;\n  const enterDelay = 300;\n  const blank = document.getElementById('blank');\n  const terminalLines = [\n    {\n      activeEl: document.getElementById('ls'),\n      command: 'ls contact-info',\n      resultingEl: document.getElementById('my-contact')\n    },\n    {\n      activeEl: document.getElementById('cat'),\n      command: 'cat description.txt',\n      resultingEl: document.getElementById('my-description')\n    },\n    {\n      activeEl: document.getElementById('whoami'),\n      command: 'whoami',\n      resultingEl: document.getElementById('my-name')\n    }\n  ];\n\n\n  /**\n   * Recursively type each terminal command and display corresponding results\n   *\n   * @param {HTMLElement} activeEl - element containing command\n   * @param {String} command - command to be typed\n   * @param {HTMLElement} resultingEl - element containing results\n   */\n  function type({activeEl, command, resultingEl}) {\n    activeEl.style.display = 'block';\n    activeEl.classList.add('active');\n    setTimeout(() => {\n      let i = 0;\n\n      const typeLetter = setInterval(() => {\n        if (i === command.length - 1) {\n          clearInterval(typeLetter);\n\n          setTimeout(() => {\n            resultingEl.style.display = 'block';\n            activeEl.classList.remove('active');\n\n            if (terminalLines.length) {\n              type(terminalLines.pop());\n            } else {\n              blank.style.display = 'block';\n              blank.classList.add('active');\n            }\n          }, enterDelay);\n        }\n\n        activeEl.innerHTML += command[i] === ' ' ? '&nbsp;' : command[i];\n        i++;\n      }, typeSpeed);\n    }, typeDelay);\n  }\n\n  type(terminalLines.pop());\n})();"]}