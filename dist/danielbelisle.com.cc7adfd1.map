{"version":3,"sources":["js/dock.js","js/drag.js","js/terminal.js","index.js"],"names":["about","document","getElementById","work","terminal","chrome","panels","querySelectorAll","addEventListener","forEach","panel","classList","remove","style","display","add","desktop","dock","querySelector","e","shiftX","clientX","getBoundingClientRect","left","shiftY","clientY","top","onmousemove","pageX","pageY","addButtonEvents","closeButton","maxButton","minButton","from","relatedTarget","toElement","nodeName","typeSpeed","typeDelay","enterDelay","blank","terminalLines","activeEl","command","resultingEl","type","setTimeout","i","typeLetter","setInterval","length","clearInterval","pop","innerHTML"],"mappings":"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","file":"danielbelisle.com.cc7adfd1.map","sourceRoot":"..","sourcesContent":["(function() {\n  const about = document.getElementById('about');\n  const work = document.getElementById('work');\n  const terminal = document.getElementById('terminal');\n  const chrome = document.getElementById('chrome');\n  const panels = document.querySelectorAll('.panel');\n\n  about.addEventListener('click', () => {\n    panels.forEach((panel) => panel.classList.remove('last-clicked'));\n    terminal.style.display = 'flex';\n    terminal.classList.add('last-clicked');\n  });\n\n  work.addEventListener('click', () => {\n    panels.forEach((panel) => panel.classList.remove('last-clicked'));\n    chrome.style.display = 'flex';\n    chrome.classList.add('last-clicked');\n  });\n})();","(function() {\n  const panels = document.querySelectorAll('.panel');\n  const desktop = document.getElementById('desktop');\n  const dock = document.getElementById('dock');\n\n  function addButtonEvents(panel) {\n    const closeButton = panel.querySelector('.red');\n    const maxButton = panel.querySelector('.green');\n    const minButton = panel.querySelector('.yellow');\n\n    if (closeButton) {\n      closeButton.addEventListener('click', () => {\n        panel.style.display = 'none';\n        panel.classList.remove('full-screen');\n        dock.classList.remove('collapsed');\n      });\n    }\n\n    if (maxButton) {\n      maxButton.addEventListener('click', () => {\n        dock.classList.add('collapsed');\n        panel.classList.add('full-screen');\n      });\n    }\n\n    if (minButton) {\n      minButton.addEventListener('click', () => {\n        dock.classList.remove('collapsed');\n        panel.classList.remove('full-screen');\n      });\n    }\n  }\n\n  // TODO: Add these for mobile\n  // desktop.addEventListener(\"touchstart\", dragStart, false);\n  // desktop.addEventListener(\"touchend\", dragEnd, false);\n\n  /**\n   * Find all panels and make them draggable. If no panel-header is found the panel\n   * itself may be grabbed.\n   */\n  panels.forEach((panel) => {\n    panel.addEventListener('mousedown', () => {\n      panels.forEach((panel) => panel.classList.remove('last-clicked'));\n      panel.classList.add('last-clicked');\n    });\n\n    const header = panel.querySelector('.panel-header') || panel;\n    header.addEventListener('mousedown', (e) => {\n      const shiftX = e.clientX - panel.getBoundingClientRect().left;\n      const shiftY = e.clientY - panel.getBoundingClientRect().top;\n\n      desktop.onmousemove = (e) => {\n        panel.style.left = e.pageX - shiftX + 'px';\n        panel.style.top = e.pageY - shiftY + 'px';\n      };\n    });\n\n    addButtonEvents(panel);\n\n    desktop.addEventListener('mouseup', () => desktop.onmousemove = null);\n\n    desktop.addEventListener('mouseout', (e) => {\n      const from = e.relatedTarget || e.toElement;\n      if (!from || from.nodeName === 'HTML') {\n        desktop.onmousemove = null;\n      }\n    });\n  });\n\n})();","(function() {\n  const typeSpeed = 60;\n  const typeDelay = 1000;\n  const enterDelay = 300;\n  const blank = document.getElementById('blank');\n  const terminalLines = [\n    {\n      activeEl: document.getElementById('ls'),\n      command: 'ls contact-info',\n      resultingEl: document.getElementById('my-contact')\n    },\n    {\n      activeEl: document.getElementById('cat'),\n      command: 'cat description.txt',\n      resultingEl: document.getElementById('my-description')\n    },\n    {\n      activeEl: document.getElementById('whoami'),\n      command: 'whoami',\n      resultingEl: document.getElementById('my-name')\n    }\n  ];\n\n\n  /**\n   * Recursively type each terminal command and display corresponding results\n   *\n   * @param {HTMLElement} activeEl - element containing command\n   * @param {String} command - command to be typed\n   * @param {HTMLElement} resultingEl - element containing results\n   */\n  function type({activeEl, command, resultingEl}) {\n    activeEl.style.display = 'block';\n    activeEl.classList.add('active');\n    setTimeout(() => {\n      let i = 0;\n\n      const typeLetter = setInterval(() => {\n        if (i === command.length - 1) {\n          clearInterval(typeLetter);\n\n          setTimeout(() => {\n            resultingEl.style.display = 'block';\n            activeEl.classList.remove('active');\n\n            if (terminalLines.length) {\n              type(terminalLines.pop());\n            } else {\n              blank.style.display = 'block';\n              blank.classList.add('active');\n            }\n          }, enterDelay);\n        }\n\n        activeEl.innerHTML += command[i] === ' ' ? '&nbsp;' : command[i];\n        i++;\n      }, typeSpeed);\n    }, typeDelay);\n  }\n\n  type(terminalLines.pop());\n})();","import \"./js/dock.js\";\nimport \"./js/drag.js\";\nimport \"./js/terminal.js\";"]}